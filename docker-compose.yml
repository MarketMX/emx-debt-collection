services:
  app:
    container_name: debt-backend
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: unless-stopped
    ports:
      - ${PORT}:${PORT}
    environment:
      APP_ENV: ${APP_ENV}
      PORT: ${PORT}
      BLUEPRINT_DB_HOST: ${BLUEPRINT_DB_HOST}
      BLUEPRINT_DB_PORT: ${BLUEPRINT_DB_PORT}
      BLUEPRINT_DB_DATABASE: ${BLUEPRINT_DB_DATABASE}
      BLUEPRINT_DB_USERNAME: ${BLUEPRINT_DB_USERNAME}
      BLUEPRINT_DB_PASSWORD: ${BLUEPRINT_DB_PASSWORD}
      BLUEPRINT_DB_SCHEMA: ${BLUEPRINT_DB_SCHEMA}
      KEYCLOAK_SERVER_URL: http://debt-keycloak:8080
      KEYCLOAK_FRONTEND_URL: http://localhost:8081
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
    depends_on:
      psql_bp:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - blueprint

  frontend:
    container_name: debt-frontend
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "5173:80" # Maps to the internal port 80 of the NGINX container
    networks:
      - blueprint

  psql_bp:
    container_name: debt-postgres
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${BLUEPRINT_DB_DATABASE}
      POSTGRES_USER: ${BLUEPRINT_DB_USERNAME}
      POSTGRES_PASSWORD: ${BLUEPRINT_DB_PASSWORD}
    ports:
      - "${BLUEPRINT_DB_PORT}:5432"
    volumes:
      - psql_volume_bp:/var/lib/postgresql/data
      - ./docker/postgresql/init-keycloak-db.sh:/docker-entrypoint-initdb.d/init-keycloak-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BLUEPRINT_DB_USERNAME} -d ${BLUEPRINT_DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - blueprint
  
  # 'keycloak' is now correctly indented under 'services'
  keycloak:
    container_name: debt-keycloak
    image: quay.io/keycloak/keycloak:latest
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${KEYCLOAK_DB_HOST}:${KEYCLOAK_DB_PORT}/${KEYCLOAK_DB_DATABASE}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USERNAME}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    ports:
      - "${KEYCLOAK_PORT}:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
<<<<<<< HEAD
      
    depends_on:
      psql_bp:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Use 'entrypoint' to override the startup command and solve the race condition
    entrypoint: >
      /bin/sh -c "
      /opt/keycloak/wait-for-postgres.sh ${KEYCLOAK_DB_HOST} ${KEYCLOAK_DB_DATABASE} ${KEYCLOAK_DB_USERNAME} &&
      /opt/keycloak/bin/kc.sh start-dev
      "
=======
      - keycloak_conf:/opt/keycloak/conf
      - keycloak_cache:/opt/keycloak/data/h2
    depends_on:
      psql_bp:
        condition: service_healthy
    command: start-dev --import-realm
>>>>>>> aeb8902fd94c4e5eb8f2a2959e9734d65de2a0fb
    networks:
      - blueprint

volumes:
  psql_volume_bp:
  keycloak_data:
<<<<<<< HEAD

=======
  keycloak_conf:
  keycloak_cache:
>>>>>>> aeb8902fd94c4e5eb8f2a2959e9734d65de2a0fb
networks:
  blueprint: